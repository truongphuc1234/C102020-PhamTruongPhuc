@Pattern(regexp = "((19|20)\\d\\d)-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])",message = "Đúng định dạng YYYY-MM-DD")

@GetMapping({"", "/list"})
public String listCustomer(Model model, @RequestParam Optional<String> keyword, @PageableDefault(value = 3) Pageable pageable) {
    String keywordOld = "";
    if (!keyword.isPresent()) {
        model.addAttribute("customerList", customerService.findAll(pageable));
        return "/customer/list";
    } else {
        keywordOld = keyword.get();
        model.addAttribute("customerList", customerService.findAllInputText(keywordOld, pageable));
        model.addAttribute("keywordOld", keywordOld);
        return "/customer/list";
    }
}

@Query("select c from customer c where concat(c.name,c.idCard,c.phone,c.email) like %?1%")
Page<Customer> findAllInputTex(String keyword,Pageable pageable);

  @Query("SELECT e FROM Customer e WHERE e.name = :name AND e.address = :address")

    @Query("SELECT e FROM Customer e WHERE e.name = ?1 AND e.address = ?2")




    @Column(name = "customer_birthday",nullable = false)
    @Pattern(regexp = "^(19|20)\\d{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$",message = "Date must be format YYYY-MM-DD")
    @NotNull(message = "Date must be not empty")
    private String customerBirthday;

    @Column(name = "customer_gender",nullable = false)
    @NotNull(message = "Gender must be not empty")
    private Boolean customerGender;

    @Column(name = "customer_id_card",nullable = false)
    @Pattern(regexp = "^\\d{9,12}$", message = "Id card must be format 'XXXXXXXXX' or 'XXXXXXXXXXXX'(X is number)")
    @NotNull(message = "Id card must be not empty")
    private String customerIdCard;


        @Pattern(regexp = "^(090|091|\\(84\\)\\+90|\\(84\\)\\+91)\\d{7}$",message = "Phone number must format 090xxxxxxx or 091xxxxxxx or (84)+90xxxxxxx or (84)+91xxxxxxx")
        @NotNull(message = "Phone number must be not empty")

        //    @NotBlank(message = "Name must be not empty")
        //    @Size(max = 45)

        //    @Pattern(regexp = "^KH-\\d{4}$",message = "Customer ID must be format 'KH-XXXX'(X is number)")
        //    @NotNull(message = "Customer id must be not empty")

        //package spring.furama.model;
        //
        //import javax.persistence.*;
        //import javax.validation.constraints.NotNull;
        //
        //@Entity
        //@Table(name = "customer_type")
        //public class CustomerType {
        //    @Id
        //    @GeneratedValue(strategy = GenerationType.IDENTITY)
        //    @Column(name = "customer_type_id")
        //    private int customerTypeId;
        //
        //    @Column(name = "customer_type_name")
        //    @NotNull(message = "Customer type must be not empty")
        //    private String customerTypeName;
        //
        //    public int getCustomerTypeId() {
        //        return customerTypeId;
        //    }
        //
        //    public void setCustomerTypeId(int customerTypeId) {
        //        this.customerTypeId = customerTypeId;
        //    }
        //
        //    public String getCustomerTypeName() {
        //        return customerTypeName;
        //    }
        //
        //    public void setCustomerTypeName(String customerTypeName) {
        //        this.customerTypeName = customerTypeName;
        //    }
        //}